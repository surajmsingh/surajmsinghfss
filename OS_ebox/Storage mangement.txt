Optimal Page Replacement 2
Optimal is the simplest technique for replacing pages in a frame. It decides when a page fault occurs then which frames are to be replaced.  Create a program to counts the number of page fault occurs when an input reference string is given.  The input contains integer values for a number of pages in a queue, sequence of reference strings and frame size. The output should display the total number of page faults.
Note: Text in Bold corresponds to the input 
Sample Input and Output :

Enter number of pages: 
6
Enter reference string: 
1
2
2
3
4
5
Enter number of frames: 
3

Total Page Fault is 5


Additional Sample TestCases
Sample Input and Output 1 :
Enter number of pages: 
6
Enter reference string: 
1
2
2
3
4
5
Enter number of frames: 
3

Total Page Fault is 5
Sample Input and Output 2 :
Enter number of pages: 
10
Enter reference string: 
1
2
3
1
4
5
1
2
4
6
Enter number of frames: 
3

Total Page Fault is 7



#include<stdio.h>
int main()
{
    int num;
    printf("\nEnter number of pages:");
    scanf("\n%d",&num);
    int ref[num],i;
    printf("\nEnter reference string:");
    for(i=0;i<num;i++)
        scanf("\n%d",&ref[i]);
    int frame;
    printf("\nEnter number of frames:");
    scanf("\n%d",&frame);
    int f[frame],j,fault=0,c=0;
    int check[frame],position[frame];
    for(i=0;i<frame;i++){
        position[i]=0;
        check[i]=0;
        f[i]=-1;
    }
    int flag;
    for(i=0;i<num;i++){
        flag=0;
        for(j=0;j<frame;j++){
            if(f[j]==ref[i]){
                flag=1;
                break;
            }
        }
        if(flag!=1){
            if(f[c]==-1){
                fault++;
                f[c]=ref[i];
                c++;
            }
            else{
                int l,fg=0,pos=0;
                for(j=0;j<frame;j++){
                    int pt=0;
                    for(l=i+1;l<num;l++){
                        if(f[j]==ref[l]){
                            pos=l;
                            pt++;
                        }
                    }
                    check[j]=pt;
                    position[j]=pos;
                }
                for(j=0;j<frame;j++){
                    if(check[j]==0){
                        f[j]=ref[i];
                        fault++;
                        fg=1;
                        break;
                    }
                }
                if(fg==0){
                    int min=check[0],y=0;
                    for(j=1;j<frame;j++){
                        if(min>check[j])
                            y=j;
                    }
                    int mi=check[y],y2=0,max=0;
                    for(j=0;j<frame;j++){
                        if(mi==check[j]){
                            if(max<position[j]){
                                max=position[j];
                                y2=j;
                            }
                        }
                    }
                    f[y2]=ref[i];
                    fault++;
                }
            }
        }
        
    }
    printf("\nTotal Page Fault is %d",fault);
}

---------------------------------------------------------------------------------------------------------------

LRU 2


LRU is the simplest technique for replacing pages in a frame. It decides when a page fault occurs then which frames are to be replaced.  Create a program to counts the number of page fault occurs when an input reference string is given.  Initially, all the frames contain default value as -1. The input contains integer values for a number of pages in a queue, sequence of reference strings and frame size. The output should display the reference string given, pages in frames and the total number of page faults.
Note: Text in Bold corresponds to the input 
  To print PageFrames use ("%10s","Page_Frames") and to display pages inside a frame use additional spacing ("%10d",frame) between pages.
Sample Input and Output

Enter number of pages: 
6
Enter reference string: 
1
2
2
3
4
5
Enter number of frames: 
3
Page_Frames
         1        -1        -1
         1         2        -1
         1         2        -1
         1         2         3
         4         2         3
         4         5         3
Total Page Faults: 5


Additional Sample TestCases
Sample Input and Output 1 :
Enter number of pages: 
6
Enter reference string: 
1
2
2
3
4
5
Enter number of frames: 
3
Page_Frames
         1        -1        -1
         1         2        -1
         1         2        -1
         1         2         3
         4         2         3
         4         5         3
Total Page Faults: 5
Sample Input and Output 2 :
Enter number of pages: 
9
Enter reference string: 
7
0
1
2
2
0
3
0
4
Enter number of frames: 
3
Page_Frames
         7        -1        -1
         7         0        -1
         7         0         1
         2         0         1
         2         0         1
         2         0         1
         2         0         3
         2         0         3
         4         0         3
Total Page Faults: 6






#include<stdio.h>
int main(){
    int page,frame;
    int p[50],f[10],min=100;
    int i,j,k,l,m,miss=0,free=0,match=0,fl,pk;
    printf("\nEnter number of pages:");
    scanf("\n%d",&page);
    printf("\nEnter reference string:");
    for(i=0;i<page;i++){
        scanf("\n%d",&p[i]);
    }
    printf("\nEnter number of frames:");
    scanf("\n%d",&frame);
    for(i=0;i<frame;i++)
        f[i]=-1;
    printf("\nPage_Frames");
    for(k=0;k<page;k++){
        for(i=0;i<frame;i++){
            for(m=0;m<frame;m++){
                if(p[k]==f[m]){
                    match=1;
                    break;
                }
            }
            if(match==1)
                break;
            else{
                for(l=0;l<frame;l++){
                    if(f[l]==-1){
                        free=1;
                        miss++;
                        f[l]=p[k];
                        break;
                    }
                }
                if(free==1)
                    break;
                else{
                    min=100;
                    for(fl=0;fl<frame;fl++){
                        for(pk=k-1;pk>=0;pk--){
                            if(f[fl]==p[pk]){
                                if(min>pk)
                                    min=pk;
                                break;
                            }
                        }
                    }
                    for(j=0;j<frame;j++){
                        if(f[j]==p[min]){
                            f[j]=p[k];
                            miss++;
                            break;
                        }
                    }
                    break;
                }
            }
        }
        for(j=0;j<frame;j++){
            printf("\n%10d",f[j]);
        }
        printf("\n");
        free=0;
        match=0;
    }
    printf("\nTotal Page Faults:%d",miss);
    
}
---------------------------------------------------------------------------------------

LRU 1


LRU is the simplest technique for replacing pages in a frame. It decides when a page fault occurs then which frames are to be replaced.  Create a program to counts the number of page fault occurs when an input reference string is given.  The input contains integer values for a number of pages in a queue, sequence of reference strings and frame size. The output should display the total number of page faults.
Note: Text in Bold corresponds to the input 
Sample Input and Output

Enter number of pages:
6
Enter the Reference String:
1
2
2
3
1
4
Enter the Frame Size: 3
Total Page Faults = 4


Additional Sample TestCases
Sample Input and Output 1 :
Enter number of pages:
6
Enter the Reference String:
1
2
2
3
1
4
Enter the Frame Size: 3
Total Page Faults = 4
Sample Input and Output 2 :
Enter number of pages:
9
Enter the Reference String:
7
0
1
2
0
3
0
4
2
Enter the Frame Size: 3
Total Page Faults = 7






#include<stdio.h>
int main(){
    int page,frame;
    int p[50],f[10],min=100;
    int i,j,k,l,m,miss=0,free=0,match=0,fl,pk;
    printf("Enter number of pages:\n");
    scanf("%d",&page);
    printf("Enter the Reference String:\n");
    for(i=0;i<page;i++){
        scanf("%d",&p[i]);
    }
    printf("Enter the Frame Size: \n");
    scanf("%d",&frame);
    for(i=0;i<frame;i++)
        f[i]=-1;
    for(k=0;k<page;k++){
        for(i=0;i<frame;i++){
            for(m=0;m<frame;m++){
                if(p[k]==f[m]){
                    match=1;
                    break;
                }
            }
            if(match==1)
                break;
            else{
                for(l=0;l<frame;l++){
                    if(f[l]==-1){
                        free=1;
                        miss++;
                        f[l]=p[k];
                        break;
                    }
                }
                if(free==1)
                    break;
                else{
                    min=100;
                    for(fl=0;fl<frame;fl++){
                        for(pk=k-1;pk>=0;pk--){
                            if(f[fl]==p[pk]){
                                if(min>pk)
                                    min=pk;
                                break;
                            }
                        }
                    }
                    for(j=0;j<frame;j++){
                        if(f[j]==p[min]){
                            f[j]=p[k];
                            miss++;
                            break;
                        }
                    }
                    break;
                }
            }
        }
       
        free=0;
        match=0;
    }
    printf("Total Page Faults = %d\n",miss);
    return 0;
    
}


----------------------------------------------------------------------------------------

Linked File Allocation - Problem 4


 
Write a C program to allocate space for n files using Linked File Allocation.  Always assume that the starting block is a free block.

Note : 
Assume that the free disk space that is available is between 1 and 100. And the blocks are linked in order i.e 1 is linked to 2, 2 is linked to 3 ….. and 99 is linked to 100. If a certain block is allocated to a file, say 4, then 3 will be linked to 5.
 
Input format:
Input consists of a number of files (n) to be allocated disk space ( int ), name ( string ), Start of the block ( int ), and length ( int ) of the n files to be allocated disk space.
 
Output format:
The output consists of file allocation details using linked allocation technique after allocating the input files.
[ Refer Sample Input and Output for further details ]
 
Sample Input and Output :
[ All text of bold corresponds to input ]
Enter the number of files to be allocated
6
Enter the name of the file 1
F1
Enter the starting block allocated to the file 1
5
Enter the length of the file 1
15
Enter the name of the file 2
F2
Enter the starting block allocated to the file 2
2
Enter the length of the file 2
25
Enter the name of the file 3
F3
Enter the starting block allocated to the file 3
44
Enter the length of the file 3
10
Enter the name of the file 4
F4
Enter the starting block allocated to the file 4
60
Enter the length of the file 4
30
Enter the name of the file 5
F5
Enter the starting block allocated to the file 5
42
Enter the length of the file 5
32
Enter the name of the file 6
F6
Enter the starting block allocated to the file 6
42
Enter the length of the file 6
17
File Allocation Details
Disk space allocated to F1
5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
Disk space allocated to F2
2 3 4 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41
Disk space allocated to F3
44 45 46 47 48 49 50 51 52 53
Disk space allocated to F4
60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89
F5 cannot be allocated disk space
Disk space allocated to F6
42 43 54 55 56 57 58 59 90 91 92 93 94 95 96 97 98
 






#include<stdio.h>

typedef struct node{
    int start,len,num;
    char name[10];
}node;
node arr[20];
int str[200];
void setspace(){
    for(int i=0;i<100;i++)
        str[i]=-1;
}

void allocspace(int start,int len,int num){
    int j=0;
    for(int i=start;j<len;i++){
        if(str[i]==-1){
            str[i]=num;
            j++;
        }
    }
}

int check(int start,int len,int num){
    int j=0;
    for(int i=start;j<len&&i<100;i++){
        if(str[i]==-1)
            j++;
    }
    if(j==len)
        return 1;
    else
        return 2;
}

int main(){
    printf("\nEnter the number of files to be allocated");
    int num;
    scanf("\n%d",&num);
    setspace();
    for(int i=0;i<num;i++){
        int s,n,l;
        printf("\nEnter the name of the file %d",i+1);
        scanf("\n%s",arr[i].name);
        printf("\nEnter the starting block allocated to the file %d",i+1);
        scanf("\n%d",&s);
        printf("\nEnter the length of the file %d",i+1);
        scanf("%d",&l);
        n=i+1;
        arr[i].start=s;
        arr[i].len=l;
        arr[i].num=n;
        int ch=check(s,l,n);
        if(ch==1)
            allocspace(s,l,n);
        else{
            arr[i].num=-1;
        }
    }
    printf("\nFile Allocation Details\n");
    for(int i=0;i<num;i++){
        if(arr[i].num==-1){
            printf("%s cannot be allocated disk space",arr[i].name);
        }
        else{
            printf("\nDisk space allocated to %s\n",arr[i].name);
            for(int j=0;j<100;j++){
                if(str[j]==arr[i].num)
                    printf("%d ",j);
            }
        }
    }
    printf("\n");
}







--------------------------------------------------------------------------------------

FIFO1


FIFO is the simplest technique for replacing pages in a frame. It decides when a page fault occurs then which frames are to be replaced.  Create a program to counts the number of page fault occurs when an input reference string is given.  The input contains integer values for a number of pages in a queue, sequence of reference strings and frame size. The output should display the total number of page faults.
Note: Text in Bold corresponds to the input 
Sample Input and Output
Enter No. of Pages:
6
Enter values of Reference String :
1
2
2
3
1
4
Enter no. of frames:
3
Total Page Faults 4

 


Additional Sample TestCases
Sample Input and Output 1 :
Enter No. of Pages:
6
Enter values of Reference String :
1
2
2
3
1
4
Enter no. of frames:
3
Total Page Faults 4
Sample Input and Output 2 :
Enter No. of Pages:
8
Enter values of Reference String :
1
2
3
4
5
6
7
4
Enter no. of frames:
6
Total Page Faults 7



#include<stdio.h>
int main()
{
int i,j,n,a[50],frame[10],no,k,avail,count=0;
printf("Enter No. of Pages:\n");
scanf("%d",&n);
printf("Enter values of Reference String :\n");
for(i=1;i<=n;i++)
  scanf("%d",&a[i]);
 
printf("Enter no. of frames:\n");
scanf("%d",&no);
            
for(i=0;i<no;i++)
   { frame[i]= -1;
    j=0;}

for(i=1;i<=n;i++)
{
    
    avail=0;
    for(k=0;k<no;k++)
        if(frame[k]==a[i])
            avail=1;
 
 
 if (avail==0)
{
    frame[j]=a[i];
    j=(j+1)%no;
    count++;
}

}
printf("Total Page Faults %d",count);
return 0;
}
-------------------------------------------------------------------------------------------------

FIFO 2

FIFO is the simplest technique for replacing pages in a frame. It decides when a page fault occurs then which frames are to be replaced.  Create a program to counts the number of page fault occurs when an input reference string is given.  Initially, all the frames contain default value as -1. The input contains integer values for a number of pages in a queue, sequence of reference strings and frame size. The output should display the reference string given, pages in frames and the total number of page faults.
Note: Text in Bold corresponds to the input 
  For spacing between Ref.string and PageFrames use ("%s%40s\n","Ref.string","PageFrames") and space between 1 (Ref.string) and 1(PageFrames) use ("%45s",""). To display pages inside a frame use additional spacing ("%10d",frame) between pages.
Sample Input and Output
Enter the number of pages:
6

Enter the reference string:
1
2
2
3
1
4

Enter frame size:
3
Ref.string                              PageFrames
1                                                      1        -1        -1
2                                                      1         2        -1
2
3                                                      1         2         3
1
4                                                      4         2         3
Total Page Fault is 4


Additional Sample TestCases
Sample Input and Output 1 :
Enter the number of pages:
6

Enter the reference string:
1
2
2
3
1
4

Enter frame size:
3
Ref.string                              PageFrames
1                                                      1        -1        -1
2                                                      1         2        -1
2
3                                                      1         2         3
1
4                                                      4         2         3
Total Page Fault is 4






#include<stdio.h>
int main(){
    int num;
    printf("\nEnter the number of pages:");
    scanf("\n%d",&num);
    printf("\nEnter the reference string:");
    int str[10],frames;
    for(int i=0;i<num;i++)
        scanf("\n%d",&str[i]);
    printf("\nEnter frame size:");
    scanf("\n%d",&frames);
    int arr[frames],count=num;
    for(int i=0;i<frames;i++)
        arr[i]=-1;
    printf("\n%s%40s\n","Ref.string","PageFrames");
    
    for(int i=0;i<num;i++){
        int state=0;
        int min=100,chang=0;
        
        for(int j=0;j<num;j++){
            if(arr[j]==-1){
                state=1;
                arr[j]=str[i];
                break;
            }
            else if(arr[j]==str[i]){
                count--;
                state=2;
                break;
            }
            else if(arr[j]!=-1){
                state=3;
                for(int k=i;k>=0;k--){
                    if(arr[j]==str[k]){
                        if(min>k){
                            min=k;
                            chang=j;
                        }
                    }
                }
            }
        }
        if(state==3){
            arr[chang]=str[i];
        }
        if(state!=2){
            printf("%d%45s ",str[i]," ");
            for(int l=0;l<frames;l++)
                printf("%10d",arr[l]);
        }
        else{
            printf("%d",str[i]);
        }
        printf("\n");
    }
    printf("\nTotal Page Fault is %d",count);
}
---------------------------------------------------------------------------------
Optimal Page Replacement



Optimal is the simplest technique for replacing pages in a frame. It decides when a page fault occurs then which frames are to be replaced.  Create a program to counts the number of page fault occurs when an input reference string is given.  Initially, all the frames contain default value as -1. The input contains integer values for a number of pages in a queue, sequence of reference strings and frame size. The output should display the reference string given, pages in frames and the total number of page faults.
Note: Text in Bold corresponds to the input 
  To display pages inside a frame use additional spacing ("%10d",frame) between pages.
Sample Input and Output

Enter number of pages: 

9
Enter reference string: 
7
0
1
2
0
3
0
4
2
Enter number of frames: 
3
Page_Frames
         7        -1        -1
         7         0        -1
         7         0         1
         2         0         1
         2         0         1
         2         0         3
         2         0         3
         2         4         3
         2         4         3
Total Page Fault is 6


Additional Sample TestCases
Sample Input and Output 1 :
Enter number of pages: 
10
Enter reference string: 
1
2
3
0
1
3
5
7
1
2
Enter number of frames: 
3
Page_Frames
         1        -1        -1
         1         2        -1
         1         2         3
         1         0         3
         1         0         3
         1         0         3
         1         5         3
         1         7         3
         1         7         3
         2         7         3
Total Page Fault is 7
Sample Input and Output 2 :
Enter number of pages: 
9
Enter reference string: 
7
0
1
2
0
3
0
4
2
Enter number of frames: 
3
Page_Frames
         7        -1        -1
         7         0        -1
         7         0         1
         2         0         1
         2         0         1
         2         0         3
         2         0         3
         2         4         3
         2         4         3
Total Page Fault is 6











#include<stdio.h>
int main(){
    int num;
    printf("\nEnter number of pages:");
    scanf("\n%d",&num);
    int ref[num],i;
    printf("\nEnter reference string:");
    for(i=0;i<num;i++)
        scanf("\n%d",&ref[i]);
    int frame;
    printf("\nEnter number of frames:");
    scanf("\n%d",&frame);
    int f[frame],j,fault=0,c=0;
    int check[frame],position[frame];
    for(i=0;i<frame;i++){
        position[i]=0;
        check[i]=0;
        f[i]=-1;
    }
    printf("\nPage_Frames");
    int flag;
    for(i=0;i<num;i++){
        flag=0;
        for(j=0;j<frame;j++){
            if(f[j]==ref[i]){
                flag=1;
                break;
            }
        }
        if(flag!=1){
                if(f[c]==-1){
                    fault++;
                    f[c]=ref[i];
                    c++;
                }
                else{
                    int l,fg=0,pos=0;
                    for(j=0;j<frame;j++){
                        int pt=0;
                        for(l=i+1;l<num;l++){
                            if(f[j]==ref[l]){
                                pos=l;
                                pt++;
                            }
                        }
                        check[j]=pt;
                        position[j]=pos;
                    }
                    for(j=0;j<frame;j++){
                        if(check[j]==0){
                            f[j]=ref[i];
                            fault++;
                            fg=1;
                            break;
                        }
                    }
                    if(fg==0){
                        int min=check[0],y=0;
                        for(j=1;j<frame;j++){
                            if(min>check[j])
                                y=j;
                        }
                        int mi=check[y],y2=0,max=0;
                        for(j=0;j<frame;j++){
                            if(mi==check[j]){
                                if(max<position[j]){
                                    max=position[j];
                                    y2=j;
                                }
                            }
                        }
                        f[y2]=ref[i];
                        fault++;
                    }
                }
        }
        for(j=0;j<frame;j++)
            printf("%10d",f[j]);
        printf("\n");
    }
   printf("\nTotal Page Fault is %d",fault);     
    
}


------------------------------------------------------------
Linked File Allocation - Problem - 1


 
Write a C program to implement linked file allocation by considering the following assumptions and given sample input and output.

Note: 
Assume that the free disk space that is available is between 1 and 100. And the blocks are linked in order i.e 1 is linked to 2, 2 is linked to 3 ….. and 99 is linked to 100. If a certain block is allocated to a file, say 4, then 3 will be linked to 5.

Assume that 'n' blocks are already allocated to files. Write a C program to allocate space for 1 file using Linked File Allocation. Always assume that the starting block is a free block.
 
Input format:
Input consists of a number of blocks already allocated ( int ), n allocated block numbers ( int ), name ( string), Start of the block ( int ), and length ( int ) of the file to be allocated disk space. Enter allocated block numbers in ascending order.
 
Output format:
The output consists of file allocation details using linked allocation technique after allocating the input file.
[ Refer Sample Input and Output for further details ]
 
Sample Input and Output:
[ All text in bold corresponds to input ]
Enter the number of allocated blocks
6
Enter the block numbers of allocated blocks
4
6
7
10
22
27
Enter the name of the file
F1
Enter the starting block allocated to the file
3
Enter the length of the file
5
F1 File Allocation Details
3-> Allocated to F1
4-> Already Allocated
5-> Allocated to F1
6-> Already Allocated
7-> Already Allocated
8-> Allocated to F1
9-> Allocated to F1
10-> Already Allocated
11-> Allocated to F1








#include<stdio.h>
#include<string.h>
int main(){
    int num,i,st,len;
    char name[10];
    int allo[100]={0};
    printf("\nEnter the number of allocated blocks");
    scanf("\n%d",&num);
    int block[num];
    printf("\nEnter the block numbers of allocated blocks");
    for(i=0;i<num;i++){
        scanf("\n%d",&block[i]);
        allo[block[i]]=1;
    }
    printf("\nEnter the name of the file");
    scanf("\n%s",name);
    printf("\nEnter the starting block allocated to the file");
    scanf("\n%d",&st);
    printf("\nEnter the length of the file");
    scanf("\n%d",&len);
    printf("\n%s File Allocation Details",name);
    int j=st,c=0;
    while(c<len){
        if(allo[j]==0){
            printf("%d - Allocated to %s\n",j,name);
            c++;
        }
        else
            printf("%d - Already Allocated",j);
        
        j=j+1;
    }
}

---------------------------------------------------------------------------

Linked File Allocation - Problem 3


 
Write a C program to implement linked file allocation by considering the following assumptions and given sample input and output.

Note : 
Assume that the free disk space that is available is between 1 and 100. And the blocks are linked in order i.e 1 is linked to 2, 2 is linked to 3 ….. and 99 is linked to 100. If a certain block is allocated to a file, say 4, then 3 will be linked to 5.
 
Assume that 'n' blocks are already allocated to files. Write a program to allocate space for 2 files using Linked File Allocation. Always assume that the starting block is a free block. Display the disk blocks allocated to each file.
 
Input format :
Input consists of a number of blocks already allocated ( int ), n allocated block numbers ( int ), name ( string), Start of the block ( int ), and length ( int ) of the two files to be allocated disk space. Enter allocated block numbers in ascending order.
 
Output format :
The output consists of file allocation details using linked allocation technique after allocating the input files.
[ Refer Sample Input and Output for further details ]
 
Sample Input and Output :
[All text in bold corresponds to the input and the rest corresponds to output] 
 
Enter the number of allocated blocks
6
Enter the block numbers of allocated blocks
14
16
17
20
22
27
Enter the name of the file 1
F1
Enter the starting block allocated to the file 1
13
Enter the length of the file 1
5
Enter the name of the file 2
F2
Enter the starting block allocated to the file 2
12
Enter the length of the file 2
10
Disk space allocated to F1
13 15 18 19 21
Disk space allocated to F2
12 23 24 25 26 28 29 30 31 32

#include<stdio.h>
int main()
{
    int i,j,allno,s1,s2,l1,l2;
    char f1[10];
    char f2[10];
    printf("Enter the number of allocated blocks\n");
    scanf("%d",&allno);
    int allo[allno+1];
    
    printf("Enter the block numbers of allocated blocks\n");
    for(i=1;i<=allno;i++)
    {
        scanf("%d",&allo[i]);
    }
    
    printf("Enter the name of the file 1\n");
    scanf("%s",f1);
    printf("Enter the starting block allocated to the file 1\n");
    scanf("%d",&s1);
    printf("Enter the lenght of file 1\n");
    scanf("%d",&l1);
    
    printf("Enter the name of the file 2\n");
    scanf("%s",f2);
    printf("Enter the starting block allocated to the file 2\n");
    scanf("%d",&s2);
    printf("Enter the lenght of file 2\n");
    scanf("%d",&l2);
    
    printf("Disk space allocated to %s\n",f1);
    for(i=s1;i<=100;i++)
    {
        for(j=1;j<=allno+1;j++)
        {
            if((i!=allo[j]) && (i!=allo[j+1]) && (i!=allo[j+2]) && (i!=allo[j+3]) && (i!=allo[j+4]) && (i!=allo[j+5]) && (i!=allo[j+6]))
            {
                printf("%d\n",i);
                break;
            }
            else
            break;
        
        }
       
    }
    
    
    
    printf("Disk space allocated to %s\n",f2);
    
    
    
    
    
    return 0;
}


----------------------------------------------------------------------------------------------------
Memory Allocation - First Fit -Problem - 3

 
Write a program to create free space in such a way that the nodes are always maintained in ascending order with respect to starting address. Free space is maintained as a linked list of nodes with each node having the starting byte address and the ending byte address of a free block.
 
Input format :
Input consists of starting and ending byte addresses until the user ends his/her input.
( Always starting address should be less than or equal to ending address )
 
Output format :
The output consists of the free space blocks available for holding the process in ascending order with respect to starting byte address.
[ Refer Sample Input and Output for further details ]
 
Sample Input and Output :
[All text in bold corresponds to the input and the rest corresponds to output]
 
Enter the starting and ending addresses of the block ( enter -1 -1 to exit )
12
36
Enter the starting and ending addresses of the block ( enter -1 -1 to exit )
2
9
Enter the starting and ending addresses of the block ( enter -1 -1 to exit )
42
58
Enter the starting and ending addresses of the block ( enter -1 -1 to exit )
37
38
Enter the starting and ending addresses of the block ( enter -1 -1 to exit )
92
97
Enter the starting and ending addresses of the block ( enter -1 -1 to exit )
66
72
Free space list :
Start End
12 36
37 38
42 58
66 72
92 97

#include<stdio.h>
int main()
{
   int i=0,j,a[20],b[20],count=0,countt=0;
  
   while(count==0)
   {
      
       printf("Enter the starting and ending addresses of the block ( enter -1 -1 to exit )\n");
       scanf("%d %d",&a[i],&b[i]);
       if(a[i]>=b[i])
        break;
        
       if(a[i]==-1 && b[i]==-1)
       {
           count = 1;
           break;
       }
      
       i++;
       countt++;
       
       
       
   }
   
   int c,d;
   printf("Free space list :\nStart End\n");
   for(i=0;i<countt;i++)
   {
       for(j=0;j<countt-i-1;j++)
       {
           
           if(a[j]>a[j+1])
           {
               c=a[j];
               a[j]=a[j+1];
               a[j+1]=c;
               
               d=b[j];
               b[j]=b[j+1];
               b[j+1]=d;
               
           }
           
         
       }
   }

   for(i=0;i<countt;i++)
   {
     printf("%d %d\n",a[i],b[i]);  
   }

    return 0;
    
    
}

------------------------------------------------------------------------------

 


