1.SJF 1

Write a C program to display the details of 2 processes given the process names, burst time of the processes and the arrival order of the processes. Assume that all processes arrive at time t0.The process names are of type character, burst time and arrival time are of type integers.
SJF 1

Write a C program to display the details of 2 processes given the process names, burst time of the processes and the arrival order of the processes. Assume that all processes arrive at time t0.The process names are of type character, burst time and arrival time are of type integers.
 
Output format :
Use printf("%s%60d%40d\n", p1.name, p1.cbt, p1.arrt); to display the details in the specified format. 
Use  "%s%30s%30s" to print the table header in  the specified format.
[ Refer Sample Input and Output for further details ]
 

 Sample Input and Output :
[All text in bold corresponds to input and the rest corresponds to output]

Enter the name of process 1
A
Enter the burst time of process 1
10
Enter the arrival order of process 1
2
Enter the name of process 2
B
Enter the burst time of process 2
20
Enter the arrival order of process 2
1
Process Details
Process Name    CPU Burst Time    Arrival Order
A                                         10                                2
B                                         20                                1


Additional Sample TestCases
Sample Input and Output 1 :
Enter the name of process 1
A
Enter the burst time of process 1
10
Enter the arrival order of process 1
2
Enter the name of process 2
B
Enter the burst time of process 2
20
Enter the arrival order of process 2
1
Process Details
Process Name                CPU Burst Time                Arrival Order
A                                                          10                                       2
B                                                          20                                       1


#include<stdio.h>
struct nam
{
    char name;
    int cbt;
    int arrt;
};
int main()
{
    struct nam p1[4];
      int i;
    char pname[20]="Process Name";
    char cpu[20]="CPU Burst Time";
    char arriv[20]="Arrival Order";
    
    for(i=0;i<2;i++)
    {
    printf("Enter the name of process %d\n",i+1);
    scanf("%s",&p1[i].name);
    printf("Enter the burst time of process %d\n",i+1);
    scanf("%d",&p1[i].cbt);
    printf("Enter the arrival order of process %d\n",i+1);
    scanf("%d",&p1[i].arrt);
    }
    
    printf("Process Details\n");
    
    printf("%s%30s%30s\n",pname,cpu,arriv);
    for(i=0;i<2;i++)
    {
        printf("%s%60d%40d\n",&p1[i].name,p1[i].cbt,p1[i].arrt);
    }
    
    
    
    return 0;
}
_______________________________________________________________________________

SJF 5
 
Write a C Program to compute the waiting time and turnaround time of 2 processes using SJF algorithm given the process names, their burst times and arrival times. Also compute and print the Gantt Chart, average waiting time and average turnaround time. The names of processes are of type character array,burst time and arrival time are of type integers.
 
[Note:All the  Text in Bold corresponds to the input and the rest correspond to the output]
 
Output format :
Use printf("%s%60d%60d%40d%40d\n",p1.name, p1.cbt, p1.arrt, p1.wt, p1.tat"); to display the details in the specified format.[same for process 2]
Use  "%s%40s%40s%30s%30s" to print the table header in  the specified format and also use 94 hyphens '-'

Sample Input and Output
Enter the name of process 1
A
Enter the burst time of process 1
20
Enter the arrival order of process 1
1
Enter the name of process 2
B
Enter the burst time of process 2
10
Enter the arrival order of process 2
2
Process Details
Process Name    CPU Burst Time    Arrival Order    Waiting Time    Turnaround Time
B                                10                               2                             0                             10
A                                 20                              1                             10                           30
Average waiting time is 5.00
Average turnaround time is 20.00
----------------------------------------------------------------------------------------------
| B | A |
----------------------------------------------------------------------------------------------
0 10 30
 



Additional Sample TestCases
Sample Input and Output 1 :
Enter the name of process 1
A
Enter the burst time of process 1
20
Enter the arrival order of process 1
1
Enter the name of process 2
B
Enter the burst time of process 2
10
Enter the arrival order of process 2
2
Process Details
Process Name                          CPU Burst Time                           Arrival Order                  Waiting Time              Turnaround Time
B                                                          10                                                           2                                       0                                      10
A                                                          20                                                           1                                      10                                      30
Average waiting time is 5.00
Average turnaround time is 20.00
----------------------------------------------------------------------------------------------
| B | A |
----------------------------------------------------------------------------------------------
0 10 30










#include<stdio.h>
struct nm
{
    char name[2];
    int cbt;
    int arrt;
    int wt;
    int tat;
};
int main()
{
    struct nm p1,p2;
    int i;
    float awt,atat;
    char pname[20]="Process Name";
    char pbt[20]="CPU Burst Time";
    char part[20]="Arrival Order";
    char pwt[20]="Waiting Time";
    char ptat[20]=" Turnaround Time";
    
    
    
    
    printf("Enter the name of process 1\n");
    scanf("%s",p1.name);
    printf("Enter the burst time of process 1\n");
    scanf("%d",&p1.cbt);
    printf("Enter the arrival order of process 1\n");
    scanf("%d",&p1.arrt);
    printf("Enter the name of process 2\n");
    scanf("%s",p2.name);
    printf("Enter the burst time of process 2\n");
    scanf("%d",&p2.cbt);
    printf("Enter the arrival order of process 2\n");
    scanf("%d",&p2.arrt);
    
    
    if(p1.cbt<p2.cbt)
    {
        p1.wt=0;
        p1.tat=p1.cbt;
        p2.wt=p1.cbt;
        p2.tat=p2.wt+p2.cbt;
    }
    
    else
    {
        p2.wt=0;
        p2.tat=p2.cbt;
        p1.wt=p2.cbt;
        p1.tat=p1.wt+p1.cbt;
    }
    awt=(p1.wt+p2.wt)/2;
    atat=(p1.tat+p2.tat)/2;
    
    printf("Process Details\n");
    printf("%s%40s%40s%30s%29s\n",pname,pbt,part,pwt,ptat);
    
    if(p1.cbt<p2.cbt)
    {
        printf("%s%60d%60d%40d%40d\n",p1.name,p1.cbt,p1.arrt,p1.wt,p1.tat);
        printf("%s%60d%60d%40d%40d\n",p2.name,p2.cbt,p2.arrt,p2.wt,p2.tat);
        printf("Average waithing time is %.2f\n",awt);
        printf("Average turnaround time is %.2f\n",atat);
        for(i=0;i<94;i++)
        {printf("-");}
        printf("\n");
        
        
        printf("| %s | %s |\n",p1.name,p2.name);
        for(i=0;i<94;i++)
        printf("-");
        printf("\n");
        printf("0 %d %d\n",p1.tat,p2.tat);

        
        
    }
    
    else
    {
        printf("%s%60d%60d%40d%40d\n",p2.name,p2.cbt,p2.arrt,p2.wt,p2.tat);
        printf("%s%60d%60d%40d%40d\n",p1.name,p1.cbt,p1.arrt,p1.wt,p1.tat);
        printf("Average waiting time is %.2f\n",awt);
        printf("Average turnaround time is %.2f\n",atat);
        for(i=0;i<94;i++)
        {printf("-");}
        printf("\n");
        printf("| %s | %s |\n",p2.name,p1.name);
        for(i=0;i<94;i++)
        {printf("-");}
        printf("\n");
        
        printf("0 %d %d\n",p2.tat,p1.tat);

    }
        
    
    
    
    
    return 0;
}

_______________________________________________________________________________

SJF 3
 
Write a C Program to compute the waiting time and turnaround time of 2 processes using SJF algorithm given the process names, 
their burst times and arrival times. The names of processes are of type character array, burst time and arrival time are of type integers.
 
Output format :
Use printf("%s%60d%60d%40d%40d\n",p1.name, p1.cbt, p1.arrt, p1.wt, p1.tat"); to display the details in the specified format.[same for p2]
Use  "%s%40s%40s%30s%30s" to print the table header in  the specified format.
[ Refer Sample Input and Output for further details ]
 

Sample Input and Output :
[All text in bold corresponds to input and the rest corresponds to output]

Enter the name of process 1
A
Enter the burst time of process 1
20
Enter the arrival order of process 1
1
Enter the name of process 2
B
Enter the burst time of process 2
10
Enter the arrival order of process 2
2
Process Details
Process Name    CPU Burst Time    Arrival Order    Waiting Time    Turnaround Time
B                                10                                2                            0                             10
A                                20                                1                            10                           30
 

Additional Sample TestCases
Sample Input and Output 1 :
Enter the name of process 1
A
Enter the burst time of process 1
20
Enter the arrival order of process 1
2
Enter the name of process 2
B
Enter the burst time of process 2
10
Enter the arrival order of process 2
1
Process Details
Process Name                          CPU Burst Time                           Arrival Order                  Waiting Time              Turnaround Time
B                                                          10                                                           1                                       0                                      10
A                                                          20                                                           2                                      10                                      30



#include<stdio.h>
struct nm
{
    char name[2];
    int cbt;
    int arrt;
    int wt;
    int tat;
};
int main()
{
    struct nm p1,p2;
    
    char pname[20]="Process Name";
    char pbt[20]="CPU Burst Time";
    char part[20]="Arrival Order";
    char pwt[20]="Waiting Time";
    char ptat[20]=" Turnaround Time";
    
    
    
    
    printf("Enter the name of process 1\n");
    scanf("%s",p1.name);
    printf("Enter the burst time of process 1\n");
    scanf("%d",&p1.cbt);
    printf("Enter the arrival order of process 1\n");
    scanf("%d",&p1.arrt);
    printf("Enter the name of process 2\n");
    scanf("%s",p2.name);
    printf("Enter the burst time of process 2\n");
    scanf("%d",&p2.cbt);
    printf("Enter the arrival order of process 2\n");
    scanf("%d",&p2.arrt);
    
    
    if(p1.cbt<p2.cbt)
    {
        p1.wt=0;
        p1.tat=p1.cbt;
        p2.wt=p1.cbt;
        p2.tat=p2.wt+p2.cbt;
    }
    
    else
    {
        p2.wt=0;
        p2.tat=p2.cbt;
        p1.wt=p2.cbt;
        p1.tat=p1.wt+p1.cbt;
    }
    
    
    printf("Process Details\n");
    printf("%s%40s%40s%30s%29s\n",pname,pbt,part,pwt,ptat);
    
    if(p1.cbt<p2.cbt)
    {
        printf("%s%60d%60d%40d%40d\n",p1.name,p1.cbt,p1.arrt,p1.wt,p1.tat);
        printf("%s%60d%60d%40d%40d\n",p2.name,p2.cbt,p2.arrt,p2.wt,p2.tat);
        
        
        
    }
    
    else
    {
        printf("%s%60d%60d%40d%40d\n",p2.name,p2.cbt,p2.arrt,p2.wt,p2.tat);
        printf("%s%60d%60d%40d%40d\n",p1.name,p1.cbt,p1.arrt,p1.wt,p1.tat);
        

    }
        
    
    
    
    
    return 0;
}





--------------------------------------------------------------------------------------------------
Priority Scheduling-6

 
Write a C Program to compute the waiting time and turnaround time of the list of processes using Priority scheduling algorithm given the process names, their burst times and priority.

Input format:
Input consists of number of processes 'n' of type integer, process names are of type character, burst time and priority are of type integers.
 

Output format :
Use printf("%s%60d%60d%40d%40d\n",p1.name, p1.cbt, p1.arrt, p1.wt, p1.tat"); to display the details in the specified format.[same for process 2]
Use  "%s%40s%40s%30s%30s" to print the table header in  the specified format and use 94 hyphens.

[Note:All the  Text in Bold corresponds to the input and the rest correspond to the output]


Sample Input and Output
Enter the number of processes
4
Enter the name of process 1
A
Enter the burst time of process 1
5
Enter the priority of process 1
2
Enter the name of process 2
B
Enter the burst time of process 2
6
Enter the priority of process 2
1
Enter the name of process 3
C
Enter the burst time of process 3
3
Enter the priority of process 3
5
Enter the name of process 4
D
Enter the burst time of process 4
2
Enter the priority of process 4
4
Process Details
Process Name    CPU Burst Time               Priority                    Waiting Time          Turnaround Time
B                                   6                                                   1                                   o                                  6
A                                   5                                                   2                                   6                                  11
D                                   2                                                  4                                  11                                 13
C                                   3                                                  5                                  13                                 16

 


Additional Sample TestCases
Sample Input and Output 1 :
Enter the number of processes
4
Enter the name of process 1
A
Enter the burst time of process 1
5
Enter the priority of process 1
2
Enter the name of process 2
B
Enter the burst time of process 2
6
Enter the priority of process 2
1
Enter the name of process 3
C
Enter the burst time of process 3
3
Enter the priority of process 3
5
Enter the name of process 4
D
Enter the burst time of process 4
2
Enter the priority of process 4
4
Process Details
Process Name                          CPU Burst Time                                Priority                  Waiting Time              Turnaround Time
B                                                           6                                                           1                                       0                                       6
A                                                           5                                                           2                                       6                                      11
D                                                           2                                                           4                                      11                                      13
C                          





#include<stdio.h>
#include<string.h>
struct process{
    char name[2];
    int bt,pr,wt,tat;
};
int main(){
    int num,i,j,pos,temp;
    char tname[2];
    printf("\nEnter the number of processes\n");
    scanf("%d",&num);
    struct process p[num];
    for(i=0;i<num;i++){
        printf("\nEnter the name of process %d\n",i+1);
        scanf("%s",p[i].name);
        printf("\nEnter the burst time of process %d\n",i+1);
        scanf("%d",&p[i].bt);
        printf("\nEnter the priority of process %d\n",i+1);
        scanf("%d",&p[i].pr);
    }
    for(i=0;i<num;i++){
        pos=i;
        for(j=i+1;j<num;j++){
            if(p[j].pr<p[pos].pr)
                pos=j;
        }
        temp=p[i].pr;
        p[i].pr=p[pos].pr;
        p[pos].pr=temp;
        
        temp=p[i].bt;
        p[i].bt=p[pos].bt;
        p[pos].bt=temp;
        
        strcpy(tname,p[i].name);
        strcpy(p[i].name,p[pos].name);
        strcpy(p[pos].name,tname);
    }
    p[0].wt=0;
    for(i=1;i<num;i++){
        p[i].wt=0;
        for(j=0;j<i;j++)
            p[i].wt=p[i].wt+p[j].bt;
    }
    printf("\nProcess Details");
    printf("\nProcess Name     CPU Burst Time      Priority      Waiting Time       Turnaround Time\n");
    for(i=0;i<num;i++){
        p[i].tat=p[i].bt+p[i].wt;
        printf("%s%60d%60d%40d%40d\n",p[i].name,p[i].bt,p[i].pr,p[i].wt,p[i].tat);
    }
    
}


_____________________________________________________________________

PRIORITY SCHEDULING-2

Priority Scheduling-2

 
Write a C program to list the processes according to their priority given the process names, burst time of the processes and the priority of the processes. Assume that all processes arrive at time t0. The process names are of type character array, burst time and priority of type integers.

Input and Output format :
Refer Sample Input and Output for formatting specifications.

Sample Input and Output :
[All text in bold corresponds to the input and the rest corresponds to output] 

Enter the name of process 1
A
Enter the burst time of process 1
5
Enter the priority of process 1
2
Enter the name of process 2
B
Enter the burst time of process 2
6
Enter the priority of process 2
1
Process Details
B, A


Additional Sample TestCases
Sample Input and Output 1 :
Enter the name of process 1
A
Enter the burst time of process 1
5
Enter the priority of process 1
2
Enter the name of process 2
B
Enter the burst time of process 2
6
Enter the priority of process 2
1
Process Details
B, A



#include<stdio.h>
struct nm
{
    char name;
    int burst;
    int prior;
};

int main()
{
    int i;
    struct nm p1[2];
    
    for(i=0;i<2;i++)
    {
        printf("Enter the name of process %d\n",i+1);
        scanf("%s",&p1[i].name);
        printf("Enter the burst time of process %d\n",i+1);
        scanf("%d",&p1[i].burst);
        printf("Enter the priority of process %d\n",i+1);
        scanf("%d",&p1[i].prior);
        
    }
    printf("Process Details");
    for(i=0;i<1;i++)
    {
        if(p1[i].prior <= p1[i+1].prior)
        printf("%s, %s",&p1[i].name,&p1[i+1].name);
        
        else
        printf("%s, %s",&p1[i+1].name,&p1[i].name);
    }
    
    return 0;
}
----------------------------------------------------------


------------------------------------------------------------------
Priority Scheduling-4

 
Write a C Program to compute the waiting time and turnaround time of 2 processes using Priority scheduling algorithm given the process names, their burst times and priority. Also compute and print the average waiting time and average turnaround time.

Input format:
Input consists of number of processes 'n' of type integer, process names are of type character, burst time
and priority are of type integers.

Output format :
Use printf("%s%60d%60d%40d%40d\n",p1.name, p1.cbt, p1.arrt, p1.wt, p1.tat"); to display the details in the specified format.[same for process 2]
Use  "%s%40s%40s%30s%30s" to print the table header in  the specified format.

[Note:All the  Text in Bold corresponds to the input and the rest correspond to the output]

Sample Input and Output
Enter the name of process 1
A
Enter the burst time of process 1
5
Enter the priority of process 1
2
Enter the name of process 2
B
Enter the burst time of process 2
6
Enter the priority of process 2
1
Process Details
Process Name    CPU Burst Time    Priority     Waiting Time    Turnaround Time
B                                  6                                  1                                   0                                   6
A                                  5                                  2                                  6                                  11
Average waiting time is 3.00
Average Turnaround time is 8.50



Additional Sample TestCases
Sample Input and Output 1 :
Enter the name of process 1
A
Enter the burst time of process 1
5
Enter the priority of process 1
2
Enter the name of process 2
B
Enter the burst time of process 2
6
Enter the priority of process 2
1
Process Details
Process Name                          CPU Burst Time                                Priority                  Waiting Time              Turnaround Time
B                                                           6                                                           1                                       0                                       6
A                                                           5                                                           2                                       6                                      11
Average waiting time is 3.00
Average turnaround time is 8.50









#include<stdio.h>
#include<string.h>
struct process{
    char name[2];
    int bt,pr,wt,tat;
};
int main(){
    int i,j,pos,temp;
    char tname[2];
    float awt,atat,total=0,totall=0;
    
    
    struct process p[2];
    for(i=0;i<2;i++){
        printf("Enter the name of process %d\n",i+1);
        scanf("%s",p[i].name);
        printf("Enter the burst time of process %d\n",i+1);
        scanf("%d",&p[i].bt);
        printf("Enter the priority of process %d\n",i+1);
        scanf("%d",&p[i].pr);
    }
    
    
    for(i=0;i<2;i++){
        pos=i;
        for(j=i+1;j<2;j++){
            if(p[j].pr<p[pos].pr)
                pos=j;
        }
        temp=p[i].pr;
        p[i].pr=p[pos].pr;
        p[pos].pr=temp;
        
        temp=p[i].bt;
        p[i].bt=p[pos].bt;
        p[pos].bt=temp;
        
        strcpy(tname,p[i].name);
        strcpy(p[i].name,p[pos].name);
        strcpy(p[pos].name,tname);
    }
    p[0].wt=0;
    for(i=1;i<2;i++){
        p[i].wt=0;
        for(j=0;j<i;j++)
            p[i].wt=p[i].wt+p[j].bt;
        total=total+p[i].wt;
    }
    
     awt=total/2;
    printf("Process Details\n");
    printf("%s%40s%40s%30s%30s","Process Name","CPU Burst Time","Priority","Waiting Time","Turnaround Time\n");
    
   
    for(i=0;i<2;i++){
        p[i].tat=p[i].bt+p[i].wt;
        totall=totall+p[i].tat;
        printf("%s%60d%60d%40d%40d\n",p[i].name,p[i].bt,p[i].pr,p[i].wt,p[i].tat);
    }
  // printf("toyt====%d     %d",total,totall);
    atat=totall/2;
    printf("Average waiting time is %.2f\nAverage Turnaround time is %.2f",awt,atat);
    
}

---------------------------------------------
FCFS 7
 

Given the process names, their burst times and their arrival order, write a C Program to compute the waiting time and turnaround time of n processes using the FCFS Algorithm and display them. Also, compute and print the average waiting time and average turnaround time. The names of the processes are of type character array, burst time and arrival order are of the type integers.

 

Output format :
Use printf("%s%60d%60d%40d%40d\n",p1.name, p1.cbt, p1.arrt, p1.wt, p1.tat"); to display the details in the specified format.[same for process 2]
Use  "%s%40s%40s%30s%30s" to print the table header in  the specified format.
 

 

[Note: All the  Text in Bold corresponds to the input and the rest correspond to the output]

Sample Input & Output
Enter the number of processes
4
Enter the name of process 1
A
Enter the burst time of process 1
10
Enter the arrival order of process 1
3
Enter the name of process 2
B
Enter the burst time of process 2
20
Enter the arrival order of process 2
1
Enter the name of process 3
C
Enter the burst time of process 3
30
Enter the arrival order of process 3
4
Enter the name of process 4
D
Enter the burst time of process 4
40
Enter the arrival order of process 4
2
Process Details
Process Name             CPU Burst Time                 Arrival Order               Waiting Time            Turnaround Time
B                                                  20                                             1                                           0                                  20
D                                                  40                                             2                                           20                                60
A                                                   10                                            3                                           60                                70
C                                                    30                                           4                                           70                                100
Average waiting time is 37.50
Average turn around time is 62.50







#include<stdio.h>
#include<string.h>
struct process{
    char name[2];
    int cbt,arrt,wt,tat;
};
int main(){
    int num,i,j,temp,pos;
    float awt,atat,total=0;
    char tname[2];
    printf("\nEnter the number of processes\n");
    scanf("%d",&num);
    struct process p[num];
    for(i=0;i<num;i++){
        printf("\nEnter the name of process %d\n",i+1);
        scanf("%s",p[i].name);
        printf("\nEnter the burst time of process %d\n",i+1);
        scanf("%d",&p[i].cbt);
        printf("\nEnter the arrival order of process %d\n",i+1);
        scanf("%d",&p[i].arrt);
    }
    for(i=0;i<num;i++){
        pos=i;
        for(j=i+1;j<num;j++){
            if(p[j].arrt<p[pos].arrt)
                pos=j;
        }
        temp=p[i].arrt;
        p[i].arrt=p[pos].arrt;
        p[pos].arrt=temp;
        
        temp=p[i].cbt;
        p[i].cbt=p[pos].cbt;
        p[pos].cbt=temp;
        
        strcpy(tname,p[i].name);
        strcpy(p[i].name,p[pos].name);
        strcpy(p[pos].name,tname);
        
    }
    p[0].wt=0;
    for(i=1;i<num;i++){
        p[i].wt=0;
        for(j=0;j<i;j++)
            p[i].wt=p[i].wt+p[j].cbt;
        total=total+p[i].wt;
        
    }
    
    awt=total/num;
    printf("\nProcess Details\n");
    printf("Process Name     CPU Burst Time     Arrival Order     Waiting Time      Turnaround Time\n");
    total=0;
    for(i=0;i<num;i++){
        p[i].tat=p[i].cbt+p[i].wt;
        total=total+p[i].tat;
        printf("\n%s%60d%60d%40d%40d",p[i].name,p[i].cbt,p[i].arrt,p[i].wt,p[i].tat);
    }

    atat=total/num;
    
    printf("\nAverage waiting time is %.2f",awt);
    printf("\nAverage turn around time is %.2f",atat);
}
---------------------------------------------------

FCFS 6

Given the process names, their burst times and their arrival order, write a C Program to compute the waiting time and turnaround time of n processes using the FCFS Algorithm and display them. The names of the processes are of type character array, burst time and arrival order are of the type integers.

Input and Output format:
Refer Sample Input and Output for inputs and formatting specifications.
Use printf (" %s%60d%60d%40d%40d\n ", p1.name, p1.cbt, p1.arrt, p1.wt, p1.tat "); to display the details in the specified format.[same for p2]
Use  "%s%40s%40s%30s%30s" to print the table header in  the specified format.

Sample Input and Output :
[All text in bold corresponds to the input and the rest corresponds to output]

Enter the number of processes
4
Enter the name of process 1
A
Enter the burst time of process 1
10
Enter the arrival order of process 1
3
Enter the name of process 2
B
Enter the burst time of process 2
20
Enter the arrival order of process 2
1
Enter the name of process 3
C
Enter the burst time of process 3
30
Enter the arrival order of process 3
4
Enter the name of process 4
D
Enter the burst time of process 4
40
Enter the arrival order of process 4
2
Process Details
Process Name                   CPU Burst Time                       Arrival Order                      Waiting Time                          Turnaround Time
B                                                             20                                               1                                               0                                                     20
D                                                             40                                               2                                               20                                                   60
A                                                             10                                               3                                               60                                                   70
C                                                             30                                               4                                               70                                                  100


Additional Sample TestCases
Sample Input and Output 1 :
Enter the number of processes
4
Enter the name of process 1
A
Enter the burst time of process 1
10
Enter the arrival order of process 1
3
Enter the name of process 2
B
Enter the burst time of process 2
20
Enter the arrival order of process 2
1
Enter the name of process 3
C
Enter the burst time of process 3
30
Enter the arrival order of process 3
4
Enter the name of process 4
D
Enter the burst time of process 4
40
Enter the arrival order of process 4
2
Process Details
Process Name                          CPU Burst Time                           Arrival Order                  Waiting Time              Turnaround Time
B                                                          20                                                           1                                       0                                      20
D                                                          40                                                           2                                      20                                      60
A                                                          10                                                           3                                      60                                      70
C                                                          30                                                           4                                      70                                     100





#include<stdio.h>
#include<string.h>
struct process{
    char name[2];
    int cbt,arrt,wt,tat;
};
int main(){
    int num,i,j,temp,pos;
    
    char tname[2];
    printf("\nEnter the number of processes\n");
    scanf("%d",&num);
    struct process p[num];
    for(i=0;i<num;i++){
        printf("Enter the name of process %d\n",i+1);
        scanf("%s",p[i].name);
        printf("Enter the burst time of process %d\n",i+1);
        scanf("%d",&p[i].cbt);
        printf("Enter the arrival order of process %d\n",i+1);
        scanf("%d",&p[i].arrt);
    }
    for(i=0;i<num;i++){
        pos=i;
        for(j=i+1;j<num;j++){
            if(p[j].arrt<p[pos].arrt)
                pos=j;
        }
        temp=p[i].arrt;
        p[i].arrt=p[pos].arrt;
        p[pos].arrt=temp;
        
        temp=p[i].cbt;
        p[i].cbt=p[pos].cbt;
        p[pos].cbt=temp;
        
        strcpy(tname,p[i].name);
        strcpy(p[i].name,p[pos].name);
        strcpy(p[pos].name,tname);
        
    }
    p[0].wt=0;
    for(i=1;i<num;i++){
        p[i].wt=0;
        for(j=0;j<i;j++)
            p[i].wt=p[i].wt+p[j].cbt;
       
        
    }
    
    
    printf("Process Details\n");
   printf("%s%40s%40s%30s%30s","Process Name","CPU Burst Time","Arrival Order","Waiting Time","Turnaround Time\n");

    
    for(i=0;i<num;i++){
        p[i].tat=p[i].cbt+p[i].wt;
        
        printf("\n%s%60d%60d%40d%40d",p[i].name,p[i].cbt,p[i].arrt,p[i].wt,p[i].tat);
    }

}

__________________________________________________________________________________


FCFS 3


Given the process names, their burst times and their arrival order, write a C Program to compute the waiting time and turnaround time of 2 processes using the FCFS Algorithm and display them.
The names of the processes are of type character, burst time and arrival order are of the type integers.

Output format :
Use printf("%s%60d%60d%40d%40d\n",p1.name, p1.cbt, p1.arrt, p1.wt, p1.tat"); to display the details in the specified format.[same for process 2]
Use  "%s%40s%40s%30s%30s" to print the table header in  the specified format.

[Note:All the  Text in Bold corresponds to the input and the rest correspond to the output]

Sample Input & Output
Enter the name of process 1
A
Enter the burst time of process 1
10
Enter the arrival order of process 1
2
Enter the name of process 2
B
Enter the burst time of process 2
20
Enter the arrival order of process 2
1
Process Details
Process Name        CPU Burst Time       Arrival Order         Waiting Time          Turnaround Time
B                                               20                                   1                                0                                        20
A                                               10                                   2                                 20                                    30




Additional Sample TestCases
Sample Input and Output 1 :
Enter the name of process 1
A
Enter the burst time of process 1
10
Enter the arrival order of process 1
2
Enter the name of process 2
B
Enter the burst time of process 2
20
Enter the arrival order of process 2
1
Process Details
Process Name                          CPU Burst Time                           Arrival Order                  Waiting Time              Turnaround Time
B                                                          20                                                           1                                       0                                      20
A                                                          10                                                           2                                      20                                      30





#include<stdio.h>
struct nm
{
    char name[2];
    int cbt;
    int arrt;
    int wt;
    int tat;
    
    
};
int main()
{
    struct nm p1,p2;
    int i=1;
    char pname[20]="Process Name";
    char cbt[20]="CPU Burst Time";
    char art[20]="Arrival Order";
    char wrt[20]="Waiting Time";
    char trt[20]="Turnaround Time";
    
    
     printf("Enter the name of process %d\n",i);
        scanf("%s",p1.name);
        printf("Enter the burst time of process %d\n",i);
        scanf("%d",&p1.cbt);
        printf("Enter the arrival order of process %d\n",i);
        scanf("%d",&p1.arrt);
     printf("Enter the name of process %d\n",i+1);
        scanf("%s",p2.name);
        printf("Enter the burst time of process %d\n",i+1);
        scanf("%d",&p2.cbt);
        printf("Enter the arrival order of process %d\n",i+1);
        scanf("%d",&p2.arrt);
    
    
    
    if(p1.arrt<p2.arrt)
    {
        p1.wt=0;
        p1.tat=p1.cbt;
        p2.wt=p1.cbt;
        p2.tat=p2.wt+p2.cbt;
    }
    else
    {
        p2.wt=0;
        p2.tat=p2.cbt;
        p1.wt=p2.cbt;
        p1.tat=p1.wt+p1.cbt;
    }
    
    printf("Process Details\n");
    printf("%s%40s%40s%30s%30s\n",pname,cbt,art,wrt,trt);
    if(p1.arrt<p2.arrt)
    {
                  printf("%s%60d%60d%40d%40d\n",p1.name,p1.cbt,p1.arrt,p1.wt,p1.tat);
                  printf("%s%60d%60d%40d%40d\n",p2.name,p2.cbt,p2.arrt,p2.wt,p2.tat);
 
    }
    else
    {
                  printf("%s%60d%60d%40d%40d\n",p2.name,p2.cbt,p2.arrt,p2.wt,p2.tat);
                  printf("%s%60d%60d%40d%40d\n",p1.name,p1.cbt,p1.arrt,p1.wt,p1.tat);

    }
     
    return 0;
}

--------------------------------------------------------------
Round Robin 1

 
Write a C Program to compute the waiting time and turnaround time for each processes using the Round Robin Algorithm, given names of two process and their burst times. Assume that the process arrive at the same time t0.

Input format:
Input consists of the names of two processes of type character array, their burst times of type integers and time slice of type integer.



Output format :
Use printf("%s%60d%60d%40d\n",p1.name, p1.cbt,p1.wt, p1.tat"); to display the details in the specified format.[same for process 2]
Use  "%s%40s%30s%30s" to print the table header in  the specified format.

[Note:All the  Text in Bold corresponds to the input and the rest correspond to the output]

Sample Input & Output
Enter the name of process 1
A
Enter the burst time of process 1
3
Enter the name of process 2
B
Enter the burst time of process 2
4
Enter the time slice
2
Process Details
Process Name           CPU Burst Time           Waiting Time            Turnaround Time
A                                                 3                                          2                                        5
B                                                 4                                          3                                        7



 


Additional Sample TestCases
Sample Input and Output 1 :
Enter the name of process 1
A
Enter the burst time of process 1
3
Enter the name of process 2
B
Enter the burst time of process 2
4
Enter the time slice
2
Process Details
Process Name                          CPU Burst Time                  Waiting Time              Turnaround Time
A                                                           3                                                           2                                       5
B                 





#include<stdio.h>
struct process{
    char a[2];
    int b,wt,tat;
};
int main(){
    int n;
    struct process p[2];
    for(int i=0;i<2;i++){
        printf("\nEnter the name of process %d",i+1);
        scanf("\n%s",p[i].a);
        printf("\nEnter the burst time of process %d",i+1);
        scanf("\n%d",&p[i].b);
    }
    printf("\nEnter the time slice");
    scanf("\n%d",&n);
    printf("\nProcess Details");
    printf("\n%s%40s%30s%30s","Process Name","CPU Burst Time","Waiting Time","Turnaround Time");
    if(p[0].b<p[1].b){
        p[0].tat=p[0].b+n;
        p[1].tat=p[0].b+p[1].b;
    }
    else{
        p[1].tat=p[1].tat+n;
        p[0].tat=p[0].b+p[1].b;
    }
    p[0].wt=p[0].tat-p[0].b;
    p[1].wt=p[1].tat-p[1].b;
    for(int i=0;i<2;i++)
        printf("\n%s%60d%60d%40d",p[i].a,p[i].b,p[i].wt,p[i].tat);
    
}
__________________________________________________________________________________________
